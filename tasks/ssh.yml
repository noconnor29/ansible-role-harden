---
- name: Ensure SSH daemon is running.
  service:
    name: "{{ security_sshd_name }}"
    state: "{{ security_sshd_state }}"

- name: Enable sshd crypto policy on RHEL systems
  lineinfile:
    dest: /etc/sysconfig/sshd
    regexp: "^#CRYPTO_POLICY"
    line: "CRYPTO_POLICY="
  when: ansible_os_family == "RedHat"

- name: Set Login Banner
  ansible.builtin.copy:
    src: ../templates/issue.net
    dest: /etc/issue.net
    owner: root
    group: root
    mode: 0644

- name: Update SSH configuration to be more secure.
  lineinfile:
    dest: "{{ security_ssh_config_path }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    validate: 'sshd -T -f %s'
    insertafter: EOF
    mode: 0644
  with_items:
    - regexp: "^Banner"
      line: "Banner /etc/issue.net"
    - regexp: "^Ciphers"
      line: "Ciphers {{ security_ssh_ciphers | join(',') }}"
    - regexp: "^HostKeyAlgorithms"
      line: "HostKeyAlgorithms {{ security_ssh_hostkeyalgos | join(',') }}"
    - regexp: "^MACs"
      line: "MACs {{ security_ssh_macs | join(',') }}"
    - regexp: "^KexAlgorithms"
      line: "KexAlgorithms {{ security_ssh_kexalgos | join(',') }}"
    - regexp: "^PubkeyAcceptedKeyTypes"
      line: "PubkeyAcceptedKeyTypes +{{ security_ssh_added_pubkey_types | join(',') }}"
    - regexp: "^PubkeyAuthentication"
      line: "PubkeyAuthentication {{ security_ssh_pubkey_authentication }}"
    - regexp: "^PasswordAuthentication"
      line: "PasswordAuthentication {{ security_ssh_password_authentication }}"
    - regexp: "^PermitRootLogin"
      line: "PermitRootLogin {{ security_ssh_permit_root_login }}"
    - regexp: "^AllowTcpForwarding"
      line: "AllowTcpForwarding {{ security_ssh_tcp_fwd }}"
    - regexp: "^Port"
      line: "Port {{ security_ssh_port }}"
    - regexp: "^UseDNS"
      line: "UseDNS {{ security_ssh_usedns }}"
    - regexp: "^PermitEmptyPasswords"
      line: "PermitEmptyPasswords {{ security_ssh_permit_empty_password }}"
    - regexp: "^ChallengeResponseAuthentication"
      line: "ChallengeResponseAuthentication {{ security_ssh_challenge_response_auth }}"
    - regexp: "^GSSAPIAuthentication"
      line: "GSSAPIAuthentication {{ security_ssh_gss_api_authentication }}"
    - regexp: "^X11Forwarding"
      line: "X11Forwarding {{ security_ssh_x11_forwarding }}"
    - regexp: "^AddressFamily"
      line: "AddressFamily inet"
  notify: restart ssh

- name: Add configured users allowed to connect over ssh
  lineinfile:
    dest: "{{ security_ssh_config_path }}"
    regexp: '^AllowUsers'
    line: "AllowUsers {{ security_ssh_allowed_users | join(' ') }}"
    state: present
    create: true
    validate: 'sshd -T -f %s'
    mode: 0644
  when: security_ssh_allowed_users | length > 0
  notify: restart ssh

- name: Add configured groups allowed to connect over ssh
  lineinfile:
    dest: "{{ security_ssh_config_path }}"
    regexp: '^AllowGroups'
    line: "AllowGroups {{ security_ssh_allowed_groups | join(' ') }}"
    state: present
    create: true
    validate: 'sshd -T -f %s'
    mode: 0644
  when: security_ssh_allowed_groups | length > 0
  notify: restart ssh

- name: Add configured user accounts to passwordless sudoers.
  lineinfile:
    dest: /etc/sudoers
    regexp: '^{{ item }}'
    line: '{{ item }} ALL=(ALL) NOPASSWD: ALL'
    state: present
    validate: 'visudo -cf %s'
    mode: 0644
  with_items: "{{ security_sudoers_passwordless }}"
  when: security_sudoers_passwordless | length > 0

- name: Add configured user accounts to passworded sudoers.
  lineinfile:
    dest: /etc/sudoers
    regexp: '^{{ item }}'
    line: '{{ item }} ALL=(ALL) ALL'
    state: present
    validate: 'visudo -cf %s'
    mode: 0644
  with_items: "{{ security_sudoers_passworded }}"
  when: security_sudoers_passworded | length > 0
